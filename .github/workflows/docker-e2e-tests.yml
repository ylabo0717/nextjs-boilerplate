name: Docker E2E Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/e2e/**'
      - 'playwright.*.config.ts'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'docker/**'
      - 'docker-compose.test.yml'
      - '.github/workflows/docker-e2e-tests.yml'
      - '.github/actions/setup-docker-test-env/**'
      - '.github/actions/docker-cleanup/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/e2e/**'
      - 'playwright.*.config.ts'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'docker/**'
      - 'docker-compose.test.yml'
      - '.github/workflows/docker-e2e-tests.yml'
      - '.github/actions/setup-docker-test-env/**'
      - '.github/actions/docker-cleanup/**'

env:
  NODE_VERSION: '20.x'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

concurrency:
  group: docker-e2e-tests-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  start-app-server:
    name: Start Application Server
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker test environment
        uses: ./.github/actions/setup-docker-test-env
        with:
          test-type: 'e2e'
          enable-testcontainers: 'false'
          create-directories: 'false'

      - name: Build and start application
        run: |
          echo "üî® Building application image..."
          docker compose -f docker-compose.test.yml build app-server

          echo "üöÄ Starting application server..."
          docker compose -f docker-compose.test.yml up -d app-server

          echo "‚è≥ Waiting for application to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:3000/api/health > /dev/null; then
              echo "‚úÖ Application is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

      - name: Verify application status
        run: |
          echo "üîç Checking application status..."
          docker compose -f docker-compose.test.yml ps
          curl -s http://localhost:3000/api/health || true

  docker-e2e-tests:
    name: E2E Tests - ${{ matrix.browser }}
    needs: start-app-server
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        browser: [chromium, firefox]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker test environment
        uses: ./.github/actions/setup-docker-test-env
        with:
          test-type: 'e2e'
          enable-testcontainers: 'false'
          create-directories: 'true'

      - name: Build test image
        run: |
          echo "üî® Building Docker test image for E2E tests..."
          docker compose -f docker-compose.test.yml build app-test

      - name: Install Playwright browsers
        run: |
          echo "üì¶ Installing Playwright browsers in Docker..."
          docker compose -f docker-compose.test.yml run --rm app-test \
            pnpm playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E Tests
        run: |
          echo "üß™ Running E2E tests with ${{ matrix.browser }}..."
          docker compose -f docker-compose.test.yml run --rm \
            -e BASE_URL=http://app-server:3000 \
            -e PLAYWRIGHT_SKIP_WEBSERVER=true \
            app-test pnpm playwright test \
            --config=playwright.docker.config.ts \
            --project=${{ matrix.browser }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-e2e-test-results-${{ matrix.browser }}-${{ github.sha }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload Playwright traces
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-e2e-traces-${{ matrix.browser }}-${{ github.sha }}
          path: test-results/
          retention-days: 7
          if-no-files-found: ignore

  cleanup:
    name: Cleanup Docker Environment
    needs: [docker-e2e-tests]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean up Docker environment
        uses: ./.github/actions/docker-cleanup
        with:
          cleanup-level: 'full'
          compose-file: 'docker-compose.test.yml'
          preserve-cache: 'false'

      - name: Post E2E test summary
        run: |
          echo "üìä Docker E2E Tests Summary"
          echo "  Test Type: End-to-End Tests"
          echo "  Browsers: Chromium, Firefox"
          echo "  Environment: Docker"
          echo "  Status: Completed"
          echo "  Artifacts: E2E test results and traces uploaded"
