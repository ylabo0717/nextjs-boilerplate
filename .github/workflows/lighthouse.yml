name: Lighthouse CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Run Lighthouse CI
        run: |
          pnpm dlx @lhci/cli@0.15.x autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci
          retention-days: 7

      - name: Format Lighthouse score
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const resultsPath = '.lighthouseci';
            const files = fs.readdirSync(resultsPath);
            const jsonFiles = files.filter(f => f.endsWith('.json') && f.includes('lhr'));

            if (jsonFiles.length === 0) {
              console.log('No Lighthouse results found');
              return;
            }

            let totalScores = {
              performance: 0,
              accessibility: 0,
              'best-practices': 0,
              seo: 0
            };
            let count = 0;

            for (const file of jsonFiles) {
              const data = JSON.parse(fs.readFileSync(path.join(resultsPath, file), 'utf8'));
              if (data.categories) {
                totalScores.performance += (data.categories.performance?.score || 0);
                totalScores.accessibility += (data.categories.accessibility?.score || 0);
                totalScores['best-practices'] += (data.categories['best-practices']?.score || 0);
                totalScores.seo += (data.categories.seo?.score || 0);
                count++;
              }
            }

            if (count > 0) {
              const avgScores = {
                performance: Math.round((totalScores.performance / count) * 100),
                accessibility: Math.round((totalScores.accessibility / count) * 100),
                'best-practices': Math.round((totalScores['best-practices'] / count) * 100),
                seo: Math.round((totalScores.seo / count) * 100)
              };

              const getEmoji = (score) => {
                if (score >= 90) return 'üü¢';
                if (score >= 50) return 'üü°';
                return 'üî¥';
              };

              const summary = `## üìä Lighthouse Scores

              | Category | Score | Status |
              |----------|-------|--------|
              | Performance | ${avgScores.performance} | ${getEmoji(avgScores.performance)} |
              | Accessibility | ${avgScores.accessibility} | ${getEmoji(avgScores.accessibility)} |
              | Best Practices | ${avgScores['best-practices']} | ${getEmoji(avgScores['best-practices'])} |
              | SEO | ${avgScores.seo} | ${getEmoji(avgScores.seo)} |
              `;

              console.log(summary);

              // Create summary for GitHub Actions
              await core.summary
                .addHeading('Lighthouse Results', 2)
                .addTable([
                  [{data: 'Category', header: true}, {data: 'Score', header: true}, {data: 'Status', header: true}],
                  ['Performance', `${avgScores.performance}%`, getEmoji(avgScores.performance)],
                  ['Accessibility', `${avgScores.accessibility}%`, getEmoji(avgScores.accessibility)],
                  ['Best Practices', `${avgScores['best-practices']}%`, getEmoji(avgScores['best-practices'])],
                  ['SEO', `${avgScores.seo}%`, getEmoji(avgScores.seo)]
                ])
                .write();
            }

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const resultsPath = '.lighthouseci';
            if (!fs.existsSync(resultsPath)) {
              console.log('No Lighthouse results directory found');
              return;
            }

            const files = fs.readdirSync(resultsPath);
            const jsonFiles = files.filter(f => f.endsWith('.json') && f.includes('lhr'));

            if (jsonFiles.length === 0) {
              console.log('No Lighthouse results found');
              return;
            }

            let urlResults = {};

            for (const file of jsonFiles) {
              const data = JSON.parse(fs.readFileSync(path.join(resultsPath, file), 'utf8'));
              const url = data.finalUrl || data.requestedUrl || 'unknown';
              
              if (!urlResults[url]) {
                urlResults[url] = [];
              }
              
              if (data.categories) {
                urlResults[url].push({
                  performance: Math.round((data.categories.performance?.score || 0) * 100),
                  accessibility: Math.round((data.categories.accessibility?.score || 0) * 100),
                  'best-practices': Math.round((data.categories['best-practices']?.score || 0) * 100),
                  seo: Math.round((data.categories.seo?.score || 0) * 100),
                  fcp: data.audits?.['first-contentful-paint']?.numericValue,
                  lcp: data.audits?.['largest-contentful-paint']?.numericValue,
                  cls: data.audits?.['cumulative-layout-shift']?.numericValue,
                  tbt: data.audits?.['total-blocking-time']?.numericValue
                });
              }
            }

            let comment = '## üîç Lighthouse CI Results\n\n';

            const getEmoji = (score) => {
              if (score >= 90) return 'üü¢';
              if (score >= 50) return 'üü°';
              return 'üî¥';
            };

            const formatMs = (ms) => {
              if (!ms) return 'N/A';
              return `${(ms / 1000).toFixed(1)}s`;
            };

            for (const [url, results] of Object.entries(urlResults)) {
              const avgResult = results.reduce((acc, curr) => {
                Object.keys(curr).forEach(key => {
                  if (typeof curr[key] === 'number') {
                    acc[key] = (acc[key] || 0) + curr[key];
                  }
                });
                return acc;
              }, {});

              Object.keys(avgResult).forEach(key => {
                avgResult[key] = avgResult[key] / results.length;
              });

              const urlPath = new URL(url).pathname;
              comment += `### üìÑ ${urlPath}\n\n`;
              comment += `| Metric | Score | Status |\n`;
              comment += `|--------|-------|--------|\n`;
              comment += `| Performance | ${Math.round(avgResult.performance)}% | ${getEmoji(avgResult.performance)} |\n`;
              comment += `| Accessibility | ${Math.round(avgResult.accessibility)}% | ${getEmoji(avgResult.accessibility)} |\n`;
              comment += `| Best Practices | ${Math.round(avgResult['best-practices'])}% | ${getEmoji(avgResult['best-practices'])} |\n`;
              comment += `| SEO | ${Math.round(avgResult.seo)}% | ${getEmoji(avgResult.seo)} |\n\n`;
              
              comment += `<details>\n<summary>‚ö° Performance Metrics</summary>\n\n`;
              comment += `| Metric | Value |\n`;
              comment += `|--------|-------|\n`;
              comment += `| First Contentful Paint | ${formatMs(avgResult.fcp)} |\n`;
              comment += `| Largest Contentful Paint | ${formatMs(avgResult.lcp)} |\n`;
              comment += `| Cumulative Layout Shift | ${avgResult.cls?.toFixed(3) || 'N/A'} |\n`;
              comment += `| Total Blocking Time | ${formatMs(avgResult.tbt)} |\n`;
              comment += `</details>\n\n`;
            }

            comment += `---\n`;
            comment += `*Averaged over ${jsonFiles.length / Object.keys(urlResults).length} runs per URL*\n`;

            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('üîç Lighthouse CI Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
