name: Scheduled E2E Tests

on:
  schedule:
    # Run every day at 00:00 JST (which is 15:00 UTC of the previous day)
    - cron: '0 15 * * *'
  workflow_dispatch:
    inputs:
      browsers:
        description: 'Browsers to test (comma-separated: chromium,firefox)'
        required: false
        default: 'chromium,firefox'
        type: string
      test-pattern:
        description: 'Test file pattern to run'
        required: false
        default: ''
        type: string

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9'

jobs:
  e2e-scheduled:
    name: Scheduled E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        browser: [chromium, firefox] # webkit is not supported per playwright.config.ts
      fail-fast: false
      max-parallel: 2 # Limit parallel execution to reduce resource usage
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Build application
        run: pnpm build

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ matrix.browser }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-${{ matrix.browser }}-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}

      - name: Install Playwright dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: pnpm exec playwright install-deps ${{ matrix.browser }}

      - name: Run E2E tests
        id: test
        run: |
          # Handle manual workflow dispatch inputs
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BROWSERS="${{ github.event.inputs.browsers }}"
            PATTERN="${{ github.event.inputs.test-pattern }}"
            
            # Check if current browser is in the requested list
            if [[ -n "$BROWSERS" ]] && [[ ! "$BROWSERS" =~ "${{ matrix.browser }}" ]]; then
              echo "Skipping ${{ matrix.browser }} - not in requested browsers: $BROWSERS"
              exit 0
            fi
            
            # Run with pattern if specified
            if [[ -n "$PATTERN" ]]; then
              echo "Running tests with pattern: $PATTERN"
              pnpm exec playwright test --project=${{ matrix.browser }} "$PATTERN"
            else
              pnpm exec playwright test --project=${{ matrix.browser }}
            fi
          else
            # Regular scheduled run
            pnpm exec playwright test --project=${{ matrix.browser }}
          fi
        env:
          CI: true
          # Enable headed mode for debugging scheduled runs
          # HEADED: true

      - name: Generate test summary
        if: always()
        run: |
          echo "## E2E Test Results - ${{ matrix.browser }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.test.outcome }}" == "success" ]]; then
            echo "✅ **Status:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.test.outcome }}" == "failure" ]]; then
            echo "❌ **Status:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Status:** ${{ steps.test.outcome }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Browser:** ${{ matrix.browser }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Type:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-scheduled-${{ matrix.browser }}-${{ github.run_number }}
          path: playwright-report/
          retention-days: 7 # Standard retention period for reports (consistent with other workflows)

      - name: Upload test videos and screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts-scheduled-${{ matrix.browser }}-${{ github.run_number }}
          path: test-results/
          retention-days: 14 # Keep failure artifacts for 14 days for debugging

  notify-failures:
    name: Notify Test Failures
    runs-on: ubuntu-latest
    needs: [e2e-scheduled]
    if: failure() && github.event_name == 'schedule'
    steps:
      - name: Create issue for test failure
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const issueBody = `## 🚨 Scheduled E2E Tests Failed

            **Date:** ${date}
            **Run:** [View failed run](${runUrl})
            **Trigger:** Scheduled run

            ### Action Required
            Please investigate the failed E2E tests and fix any issues found.

            ### Debug Information
            - Check the [test artifacts](${runUrl}) for screenshots and videos
            - Review the test report for detailed failure information
            - Consider if recent changes may have caused the regression

            ---
            *This issue was automatically created by the scheduled E2E test workflow.*`;

            // Check if an issue already exists for today
            // Get all open issues with the automated label and filter by title
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'e2e-failure,automated',
              state: 'open',
              per_page: 100,
              sort: 'created',
              direction: 'desc'
            });

            // Filter issues by title containing today's date
            const todayIssues = issues.data.filter(issue => 
              issue.title.includes(date)
            );

            if (todayIssues.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `E2E Test Failure - ${date}`,
                body: issueBody,
                labels: ['e2e-failure', 'automated', 'bug']
              });
            } else {
              // Add comment to existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: todayIssues[0].number,
                body: `### 🔄 Additional failure detected\n\n[View latest failed run](${runUrl})`
              });
            }

  performance-check:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-chromium-${{ hashFiles('**/package.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-chromium-

      - name: Install Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps chromium

      - name: Install Playwright dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: pnpm exec playwright install-deps chromium

      - name: Run performance tests
        run: node scripts/performance-test.js
        env:
          NODE_ENV: test
          BASE_URL: http://localhost:3000
          SERVER_START_RETRIES: 3 # From RETRY_CONFIG.SERVER_START_RETRIES
          SERVER_START_RETRY_DELAY: 5000 # From RETRY_CONFIG.SERVER_START_RETRY_DELAY
          SERVER_POLLING_INTERVAL: 1000 # From RETRY_CONFIG.SERVER_POLLING_INTERVAL
          SERVER_FORCE_KILL_TIMEOUT: 5000 # From RETRY_CONFIG.SERVER_FORCE_KILL_TIMEOUT
          MAX_TOTAL_TIME: 3000 # From PERFORMANCE_THRESHOLDS.PAGE_LOAD_TIME
          MAX_DOM_CONTENT_LOADED: 1500 # From PERFORMANCE_THRESHOLDS.DOM_CONTENT_LOADED_TIME

      - name: Generate performance report
        if: always()
        run: |
          echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run Type:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
