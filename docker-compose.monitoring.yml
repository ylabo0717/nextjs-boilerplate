# ==============================================================================
# Docker Compose Monitoring Configuration
#
# 本番環境用の監視・メトリクス・ログ統合設定
# - 既存 Loki 設定との統合
# - OpenTelemetry メトリクス活用
# - Grafana ダッシュボード
# - Prometheus メトリクス収集
# ==============================================================================

services:
  # ==============================================================================
  # Application with Monitoring - メトリクス対応アプリケーション
  # ==============================================================================
  app-monitored:
    extends:
      file: docker-compose.prod.yml
      service: app
    environment:
      # OpenTelemetry configuration
      - OTEL_SERVICE_NAME=nextjs-app-prod
      - OTEL_SERVICE_VERSION=${APP_VERSION:-1.0.0}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=nextjs-app-prod,service.version=${APP_VERSION:-1.0.0},environment=production
      # Prometheus metrics endpoint
      - OTEL_EXPORTER_PROMETHEUS_PORT=9464
      - OTEL_EXPORTER_PROMETHEUS_ENDPOINT=/metrics
      # Logging configuration for Loki
      - LOG_LEVEL=info
      - LOG_OUTPUT=console
      - STRUCTURED_LOGGING=true
    ports:
      - '9464:9464' # Prometheus metrics endpoint
    networks:
      - app-network
      - monitoring-network
    # Enhanced health check with metrics
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -f http://localhost:3000/api/health && curl -f http://localhost:3000/api/metrics',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Monitoring labels for service discovery
    labels:
      - 'monitoring.enable=true'
      - 'monitoring.service=nextjs-app'
      - 'monitoring.port=9464'
      - 'monitoring.path=/metrics'

  # ==============================================================================
  # Loki - ログ収集システム
  # ==============================================================================
  loki:
    image: grafana/loki:latest
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./docker/loki/loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - monitoring-network
    healthcheck:
      test:
        ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Resource limits
    mem_limit: 512m
    cpus: 0.3

  # ==============================================================================
  # Prometheus - メトリクス収集
  # ==============================================================================
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring-network
    depends_on:
      - app-monitored
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:9090/-/ready || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Resource limits
    mem_limit: 1g
    cpus: 0.5

  # ==============================================================================
  # Grafana - 監視ダッシュボード
  # ==============================================================================
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:?GRAFANA_ADMIN_PASSWORD environment variable is required for security}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_SMTP_ENABLED=${GF_SMTP_ENABLED:-false}
      # Dashboard configuration
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/nextjs-overview.json
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./docker/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring-network
    depends_on:
      loki:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/api/health || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Resource limits
    mem_limit: 512m
    cpus: 0.3

  # ==============================================================================
  # Promtail - ログ収集エージェント
  # ==============================================================================
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./docker/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - monitoring-network
    depends_on:
      - loki
    restart: unless-stopped
    # Resource limits
    mem_limit: 256m
    cpus: 0.2

  # ==============================================================================
  # Nginx Proxy with Monitoring
  # ==============================================================================
  proxy-monitored:
    extends:
      file: docker-compose.prod.yml
      service: proxy
    # Nginx logs available to Promtail
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'
        labels: 'service,container'
    depends_on:
      app-monitored:
        condition: service_healthy
    networks:
      - app-network
      - monitoring-network

# ==============================================================================
# Volumes - データ永続化
# ==============================================================================
volumes:
  loki-data:
    name: nextjs-loki-data
  prometheus-data:
    name: nextjs-prometheus-data
  grafana-data:
    name: nextjs-grafana-data

# ==============================================================================
# Networks - ネットワーク分離
# ==============================================================================
networks:
  app-network:
    name: nextjs-prod-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

  monitoring-network:
    name: nextjs-monitoring-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
# ==============================================================================
# 使用方法
# ==============================================================================
#
# フル監視環境起動:
#   docker-compose -f docker-compose.monitoring.yml up -d
#
# 本番環境 + 監視統合起動:
#   docker-compose -f docker-compose.prod.yml -f docker-compose.monitoring.yml up -d
#
# 監視サービスのみ起動:
#   docker-compose -f docker-compose.monitoring.yml up -d loki prometheus grafana promtail
#
# アクセス先:
#   - アプリケーション: http://localhost (プロキシ経由)
#   - Grafana: http://localhost:3001
#   - Prometheus: http://localhost:9090
#   - Loki: http://localhost:3100
#   - メトリクス: http://localhost:9464/metrics
#
# 環境変数設定:
#   GRAFANA_ADMIN_PASSWORD=your-secure-password
#   GRAFANA_ADMIN_USER=admin
#   APP_VERSION=1.0.0
#
# ログ・メトリクス確認:
#   curl http://localhost:3000/api/health
#   curl http://localhost:3000/api/metrics
#   curl http://localhost:9090/api/v1/query?query=up
#   curl http://localhost:3100/ready
#
# ==============================================================================
