# syntax=docker/dockerfile:1

# ==============================================================================
# Next.js 15.4.6 Development Docker Image
# 
# Optimized for development workflow with:
# - Hot module replacement (HMR)
# - Fast refresh for React components
# - Debug port support
# - Volume mounts for live code changes
# - TypeScript watch mode
# - Optimized layer caching
# ==============================================================================

# Define build arguments
ARG NODE_VERSION=20.18.0
ARG ALPINE_VERSION=3.20

# ==============================================================================
# Development Stage - Optimized for development workflow
# ==============================================================================
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION}

# Enable pnpm and set non-interactive mode
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV CI=true
RUN npm install -g pnpm@latest

# Install essential packages for development
RUN apk update && \
    apk add --no-cache \
    libc6-compat \
    curl \
    git \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy package files first for better layer caching
COPY package.json pnpm-lock.yaml* ./

# Install dependencies with cache mount for faster subsequent builds
RUN --mount=type=cache,id=pnpm,target=/pnpm/store \
    pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Set ownership
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose ports
EXPOSE 3000 9229

# Set environment variables for development
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1
ENV WATCHPACK_POLLING=true

# Start development server
CMD ["pnpm", "dev"]