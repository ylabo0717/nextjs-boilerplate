# Gitleaks configuration for secret scanning
# Documentation: https://github.com/gitleaks/gitleaks

title = "Gitleaks Configuration"

# Extend the base configuration
[extend]
useDefault = true

# Additional custom rules for common secrets

# AWS Credentials - Following Official Gitleaks Configuration
[[rules]]
id = "aws-access-key"
description = "AWS Access Key ID"
# Official pattern from gitleaks default config
# Regex explanation:
#   - \b: Word boundary to ensure we match the whole key
#   - (?:A3T[A-Z0-9]|AKIA|ASIA|ABIA|ACCA): Allowed AWS Access Key ID prefixes
#     * AKIA: Long-term Access Key ID for IAM users
#     * ASIA: Temporary Security Credentials (STS)
#     * ABIA: STS service bearer token
#     * ACCA: Context-specific credential
#     * A3T[A-Z0-9]: Special prefix for certain AWS accounts
#   - [A-Z2-7]{16}: 16 characters using Base32 alphabet (uppercase letters and digits 2-7, no 0/1/8/9)
#   - The full key is 20 characters: 4-character prefix + 16-character suffix
#   - \b: Word boundary at the end
regex = '''\b((?:A3T[A-Z0-9]|AKIA|ASIA|ABIA|ACCA)[A-Z2-7]{16})\b'''
entropy = 3.0
keywords = ["a3t", "akia", "asia", "abia", "acca"]
tags = ["aws", "key"]

[[rules]]
id = "aws-secret-key"
description = "AWS Secret Access Key"
# Pattern for AWS secret keys in various contexts
regex = '''(?i)aws[_\-\s]?(?:secret|sec)[_\-\s]?(?:access[_\-\s]?)?(?:key|k)[\s]*[:=][\s]*['\"]?([a-zA-Z0-9/+=]{40})['\"]?'''
entropy = 3.5
keywords = ["aws", "secret"]
tags = ["aws", "secret"]

[[rules]]
id = "aws-session-token"
description = "AWS Session Token"
# AWS temporary security credentials
regex = '''(?i)aws[_\-\s]?(?:session[_\-\s]?)?token[\s]*[:=][\s]*['\"]?([a-zA-Z0-9/+=]{100,})['\"]?'''
entropy = 3.5
keywords = ["aws", "session", "token"]
tags = ["aws", "token"]

# GitHub Tokens - Following Official Gitleaks Configuration
[[rules]]
id = "github-pat"
description = "GitHub Personal Access Token (Classic)"
# Official pattern with entropy check
regex = '''ghp_[0-9a-zA-Z]{36}'''
entropy = 3.0
keywords = ["ghp_"]
tags = ["github", "token", "pat"]

[[rules]]
id = "github-fine-grained-pat"
description = "GitHub Fine-Grained Personal Access Token"
# New fine-grained PAT format
regex = '''github_pat_[0-9a-zA-Z_]{82}'''
entropy = 3.0
keywords = ["github_pat_"]
tags = ["github", "token", "pat"]

[[rules]]
id = "github-oauth"
description = "GitHub OAuth Access Token"
# OAuth token pattern
regex = '''gho_[0-9a-zA-Z]{36}'''
entropy = 3.0
keywords = ["gho_"]
tags = ["github", "oauth"]

[[rules]]
id = "github-app"
description = "GitHub App Token"
# App installation access tokens
regex = '''(?:ghu|ghs)_[0-9a-zA-Z]{36}'''
entropy = 3.0
keywords = ["ghu_", "ghs_"]
tags = ["github", "app"]

[[rules]]
id = "github-refresh-token"
description = "GitHub Refresh Token"
# GitHub refresh token pattern
regex = '''ghr_[0-9a-zA-Z]{36}'''
entropy = 3.0
keywords = ["ghr_"]
tags = ["github", "refresh"]

# JWT and Auth
[[rules]]
id = "jwt-token"
description = "JWT Token"
regex = '''eyJ[A-Za-z0-9-_]+\.eyJ[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+'''
keywords = ["eyJ"]
tags = ["jwt", "token"]

[[rules]]
id = "next-auth-secret"
description = "NextAuth Secret"
regex = '''(?i)(nextauth[_\-]?secret|auth[_\-]?secret)\s*[=:]\s*['\"]([^'\"]{16,})['\"]'''
entropy = 3.5
tags = ["nextauth", "secret"]

# Database Connections
[[rules]]
id = "database-url-with-password"
description = "Database Connection String with Password"
regex = '''(?i)(?:postgres|postgresql|mysql|mariadb|mongodb|redis)://[^:]+:([^@]+)@[^/]+'''
keywords = ["postgres", "mysql", "mongodb", "redis"]
tags = ["database", "password"]

[[rules]]
id = "database-url"
description = "Database Connection String"
regex = '''(?i)(database[_\-]?url|db[_\-]?url|postgres[_\-]?url|mysql[_\-]?url|mongodb[_\-]?url)\s*[=:]\s*['\"]([^'\"]+)['\"]'''
tags = ["database", "connection"]

# API Keys and Secrets - Following Official Patterns
[[rules]]
id = "generic-api-key"
description = "Generic API Key"
# Based on official gitleaks pattern with flexible context
regex = '''(?i)[\w\s.-]{0,25}(?:api[_\-\s]?(?:key|token|secret)|apikey)[\w\s.-]{0,25}[:=][\s]*['\"]([a-zA-Z0-9\-_]{20,})['\"]'''
entropy = 3.5
keywords = ["api", "apikey", "api_key", "api-key", "api_token", "api_secret"]
tags = ["api", "key"]

[[rules]]
id = "google-api-key"
description = "Google API Key"
# Google Cloud API keys pattern
regex = '''AIza[0-9A-Za-z\-_]{35}'''
entropy = 3.0
keywords = ["AIza"]
tags = ["google", "api", "key"]

[[rules]]
id = "google-oauth-token"
description = "Google OAuth Access Token"
# Google OAuth token pattern
regex = '''ya29\.[0-9A-Za-z\-_]+'''
entropy = 3.0
keywords = ["ya29"]
tags = ["google", "oauth", "token"]

[[rules]]
id = "slack-token"
description = "Slack Token"
# Slack workspace tokens
regex = '''xox[baprs]-[0-9]{10,13}-[0-9]{10,13}-[a-zA-Z0-9]{24,34}'''
entropy = 3.0
keywords = ["xoxb-", "xoxa-", "xoxp-", "xoxr-", "xoxs-"]
tags = ["slack", "token"]

[[rules]]
id = "stripe-api-key"
description = "Stripe API Key"
# Stripe secret and publishable keys
regex = '''(?:sk|pk)_(?:test|live)_[0-9a-zA-Z]{24,99}'''
entropy = 3.0
keywords = ["sk_test_", "sk_live_", "pk_test_", "pk_live_"]
tags = ["stripe", "api", "key"]

[[rules]]
id = "azure-subscription-key"
description = "Azure Subscription Key"
# Azure API Management subscription keys
regex = '''(?i)(?:azure|ocp-apim)[_\-\s]?(?:subscription[_\-\s]?)?key[\s]*[:=][\s]*['\"]?([a-f0-9]{32})['\"]?'''
entropy = 3.0
keywords = ["azure", "subscription", "ocp-apim"]
tags = ["azure", "key"]

# Modern Service Providers
[[rules]]
id = "vercel-api-token"
description = "Vercel API Token"
# Vercel personal access tokens
regex = '''[A-Za-z0-9]{24}'''
keywords = ["VERCEL_", "vercel_token"]
entropy = 4.0
tags = ["vercel", "token"]

[[rules]]
id = "supabase-key"
description = "Supabase API Key"
# Supabase anon and service role keys
regex = '''(?i)(?:supabase[_\-]?(?:anon|service[_\-]?role)?[_\-]?key)[\s]*[:=][\s]*['\"]?(eyJ[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+)['\"]?'''
keywords = ["supabase", "eyJ"]
tags = ["supabase", "key"]

[[rules]]
id = "openai-api-key"
description = "OpenAI API Key"
# OpenAI API keys pattern
regex = '''sk-[a-zA-Z0-9]{48}'''
entropy = 3.0
keywords = ["sk-"]
tags = ["openai", "api", "key"]

[[rules]]
id = "anthropic-api-key"
description = "Anthropic API Key"
# Anthropic Claude API keys
regex = '''sk-ant-[a-zA-Z0-9]{90,}'''
entropy = 3.0
keywords = ["sk-ant-"]
tags = ["anthropic", "api", "key"]

[[rules]]
id = "sendgrid-api-key"
description = "SendGrid API Key"
# SendGrid API keys
regex = '''SG\.[a-zA-Z0-9\-_]{22}\.[a-zA-Z0-9\-_]{43}'''
entropy = 3.0
keywords = ["SG."]
tags = ["sendgrid", "api", "key"]

[[rules]]
id = "twilio-api-key"
description = "Twilio API Key"
# Twilio Account SID and Auth Token patterns
regex = '''(?:AC[a-f0-9]{32}|SK[a-f0-9]{32})'''
entropy = 3.0
keywords = ["AC", "SK"]
tags = ["twilio", "api", "key"]

# Private Keys
[[rules]]
id = "private-key"
description = "Private Key"
regex = '''-----BEGIN (RSA|DSA|EC|OPENSSH|PGP|PRIVATE) (PRIVATE )?KEY-----'''
tags = ["private", "key"]

# Passwords - Following Gitleaks Default Configuration Best Practices
# Entropy settings rationale:
#   - The generic password pattern uses entropy 4.0 (higher than the 3.5 used for context-specific patterns).
#   - This higher threshold is chosen because generic patterns are more likely to match non-secret values (e.g., documentation, config templates, or benign strings),
#     so a stricter entropy requirement helps reduce false positives.
#   - In contrast, context-specific patterns (e.g., for known password fields in specific applications) use entropy 3.5 to improve detection of real secrets,
#     since the context already reduces the chance of false positives.
#   - If future changes require adjusting entropy, consider the trade-off: lowering entropy increases detection (but may raise false positives), while raising it reduces noise (but may miss some secrets).
#   - See also: https://github.com/gitleaks/gitleaks/blob/main/config/gitleaks.toml for upstream defaults and discussion.

[[rules]]
id = "generic-password"
description = "Generic Password Pattern"
# Based on official gitleaks generic API key pattern, adapted for passwords
# Using entropy 4.0 to reduce false positives while maintaining security
regex = '''(?i)[\w\s.-]{0,25}(?:password|passwd|pwd)[\w\s.-]{0,25}[:=][\s]*['\"]([^'\"]{8,})['\"]'''
entropy = 4.0
keywords = ["password", "passwd", "pwd"]
tags = ["password", "generic"]

[[rules]]
id = "password-in-url"
description = "Password in URL"
# Matches passwords in connection strings and URLs (with @ to ensure it's a credential URL)
regex = '''(?i)(?:ftp|https?|mongodb|mysql|postgres(?:ql)?|redis|ssh)://[^\s:/@]+:([^\s@]{8,})@[^\s/]+'''
entropy = 3.5
keywords = ["://", "@"]
tags = ["password", "url"]

[[rules]]
id = "env-password"
description = "Environment Variable Password"
# Following official pattern with standard entropy
regex = '''(?i)\b(?:PASSWORD|PASSWD|PWD|PASS|SECRET)[\s]*=[\s]*['\"]?([^\s'\"]{8,})['\"]?'''
entropy = 3.5
keywords = ["PASSWORD", "PASSWD", "PWD", "PASS", "SECRET"]
tags = ["password", "env"]

[[rules]]
id = "json-password"
description = "JSON Password Field"
# JSON format with standard entropy from official config
regex = '''"(?i)(?:password|passwd|pwd|pass|secret)"[\s]*:[\s]*"([^"]{8,})"'''
entropy = 3.5
keywords = ["password", "passwd", "pwd", "secret"]
tags = ["password", "json"]

[[rules]]
id = "yaml-password"
description = "YAML Password Field"
# YAML format passwords
regex = '''(?i)(?:password|passwd|pwd|pass|secret):\s*['"]?([^'"\s]{8,})['"]?'''
entropy = 3.5
keywords = ["password:", "passwd:", "pwd:", "pass:", "secret:"]
tags = ["password", "yaml"]

# Allowlist for false positives
[allowlist]
description = "Global allowlist"
commits = [
  "202733c3d9445f03f5053abe8ea6dd342af164b7", # P0 security improvements - false positive on Grafana password env var syntax
  "38e33662ea7ed29dea8f4f9f5c040fcd60650abb"  # Phase 4 Docker Compose - false positive on Grafana environment variable validation pattern
]
paths = [
  # Ignore test files
  '''tests?\/.*''',
  '''.*\.test\.(js|ts|jsx|tsx)$''',
  '''.*\.spec\.(js|ts|jsx|tsx)$''',
  # Ignore test reports
  '''playwright-report\/.*''',
  '''coverage\/.*''',
  '''\.nyc_output\/.*''',
  # Ignore documentation
  '''docs?\/.*''',
  '''.*\.md$''',
  # Ignore lock files
  '''package-lock\.json''',
  '''pnpm-lock\.yaml''',
  '''yarn\.lock''',
  # Ignore build output
  '''\.next\/.*''',
  '''dist\/.*''',
  '''build\/.*''',
  '''out\/.*''',
  # Ignore node_modules
  '''node_modules\/.*''',
  # Ignore secret scanning scripts themselves
  '''\.github/scripts/simple-secret-scan\.sh''',
  '''\.gitleaks\.toml''',
  # Ignore GitHub configuration files
  '''CODEOWNERS''',
  '''\.github/dependabot\.yml''',
  '''\.github/workflows/.*\.yml''',
  # Ignore MCP configuration
  '''claude_mcp_config\.json''',
  '''\.mcp\.json''',
  # Ignore example environment files (contain dummy/test data)
  '''\.env\..*\.example$''',
  '''\.env\.test$'''
]

# Allow example/dummy values
regexes = [
  '''example\.com''',
  '''localhost''',
  '''127\.0\.0\.1''',
  '''your[_\-]?api[_\-]?key''',
  '''your[_\-]?password''',
  '''xxx+''',
  '''dummy''',
  '''fake''',
  '''placeholder''',
  '''changeme''',
  '''password123''',
  '''test[_\-]?password''',
  '''sample[_\-]?password''',
  '''default[_\-]?password''',
  # Test database credentials in .env files
  '''test:test@''',
  '''user:test@''',
  '''postgresql://test:test@''',
  '''<.*>''',
  # Common weak passwords that are likely examples
  '''123456''',
  '''qwerty''',
  '''admin''',
  '''letmein''',
  '''welcome''',
  '''monkey''',
  '''dragon''',
  '''master''',
  '''abc123''',
  # Common example passwords in documentation
  '''pass''',
  '''user:pass@''',
  # Allow environment variable references (not the actual values)
  '''process\.env\.LOG_IP_HASH_SECRET''',
  '''\$\{LOG_IP_HASH_SECRET\}''',        # Docker Compose style environment variable expansion
  '''LOG_IP_HASH_SECRET=\$\{.*\}''',     # Docker Compose environment variable setting
  # Allow Redis example URLs in documentation
  '''redis://localhost:6379''',
  '''redis://new-host:6379''',
  '''6379''',
  # Allow JWT_SECRET environment variable references
  '''process\.env\.JWT_SECRET''',
  '''\$\{JWT_SECRET\}''',
  '''JWT_SECRET=\$\{.*\}''',
  # Allow LOKI authentication environment variable references
  '''process\.env\.LOKI_PASSWORD''',
  '''process\.env\.LOKI_USERNAME''',
  '''\$\{LOKI_PASSWORD\}''',
  '''\$\{LOKI_USERNAME\}''',
  '''LOKI_PASSWORD=\$\{.*\}''',
  '''LOKI_USERNAME=\$\{.*\}''',
  # Allow GRAFANA authentication environment variable references
  '''\$\{GRAFANA_ADMIN_PASSWORD\}''',
  '''GRAFANA_ADMIN_PASSWORD=\$\{.*\}''',
  # Allow Grafana password with required environment variable error message
  '''\$\{GRAFANA_ADMIN_PASSWORD:\?.*\}''',
  '''GRAFANA_ADMIN_PASSWORD environment variable is required for security''',
  # Allow Docker Compose environment variable validation patterns (not actual secrets)
  '''\:\?.*environment.*variable.*required''',
  '''\$\{.*:\?.*\}''',
  # Exact match for Grafana environment variable validation
  '''GF_SECURITY_ADMIN_PASSWORD=\$\{GRAFANA_ADMIN_PASSWORD:\?GRAFANA_ADMIN_PASSWORD environment variable is required for security\}''',
  # Test and example environment files
  '''\.env\.test\.example''',
  '''\.env\.prod\.example''',
  # Allow common test/example password patterns
  '''change-this-secure-password-in-production''',
  '''change-this-in-production''',
  '''your-.*-change-this-in-production'''
]

# Note: commits allowlist is for specific commit SHAs, not file patterns
# File patterns should be in the main paths allowlist above
