name: Docker E2E Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/e2e/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'playwright.*.config.ts'
      - 'docker/**'
      - 'docker-compose.test.yml'
      - '.github/workflows/docker-e2e-tests.yml'
      - '.github/actions/setup-docker-test-env/**'
      - '.github/actions/docker-cleanup/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/e2e/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'playwright.*.config.ts'
      - 'docker/**'
      - 'docker-compose.test.yml'
      - '.github/workflows/docker-e2e-tests.yml'
      - '.github/actions/setup-docker-test-env/**'
      - '.github/actions/docker-cleanup/**'

env:
  NODE_VERSION: '20.x'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

concurrency:
  group: docker-e2e-tests-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  start-app-server:
    name: Start Application Server
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      server-ready: ${{ steps.health-check.outputs.ready }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker test environment
        uses: ./.github/actions/setup-docker-test-env
        with:
          test-type: 'e2e'
          enable-testcontainers: 'false'
          create-directories: 'false'

      - name: Build app server image
        run: |
          echo "üî® Building Docker app server image for E2E tests..."
          docker compose -f docker-compose.test.yml build app-server

      - name: Start app server
        run: |
          echo "üöÄ Starting application server in Docker..."
          docker compose -f docker-compose.test.yml up app-server -d

      - name: Wait for app server to be ready
        id: health-check
        run: |
          echo "‚è≥ Waiting for app server to be ready..."
          READY=false
          for i in {1..30}; do
            if docker compose -f docker-compose.test.yml exec -T app-server curl -f http://localhost:3000/api/health >/dev/null 2>&1; then
              echo "‚úÖ App server is ready!"
              READY=true
              break
            fi
            echo "  Attempt $i/30: Server not ready yet, waiting..."
            sleep 4
          done
          
          if [ "$READY" = "false" ]; then
            echo "‚ùå App server failed to start within timeout"
            echo "üìã Server logs:"
            docker compose -f docker-compose.test.yml logs app-server
            exit 1
          fi
          
          echo "ready=true" >> $GITHUB_OUTPUT

  docker-e2e-tests:
    name: Docker E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: start-app-server
    if: needs.start-app-server.outputs.server-ready == 'true'
    
    strategy:
      matrix:
        browser: [chromium, firefox]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker test environment
        uses: ./.github/actions/setup-docker-test-env
        with:
          test-type: 'e2e'
          enable-testcontainers: 'false'
          create-directories: 'true'

      - name: Restart app server (ensure clean state)
        run: |
          echo "üîÑ Ensuring clean app server state..."
          docker compose -f docker-compose.test.yml build app-server
          docker compose -f docker-compose.test.yml up app-server -d
          
          # Health check
          timeout 120s bash -c 'until docker compose -f docker-compose.test.yml exec -T app-server curl -f http://localhost:3000/api/health; do sleep 2; done'

      - name: Run Playwright E2E Tests in Docker
        run: |
          echo "üé≠ Running Playwright E2E tests with browser: ${{ matrix.browser }}"
          docker compose -f docker-compose.test.yml run --rm \
            -e PLAYWRIGHT_PROJECT=${{ matrix.browser }} \
            playwright npx playwright test --project=${{ matrix.browser }} --config=playwright.docker.config.ts

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-playwright-report-${{ matrix.browser }}-${{ github.sha }}
          path: playwright-report/
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload test videos and traces
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-playwright-failures-${{ matrix.browser }}-${{ github.sha }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7
          if-no-files-found: ignore

      - name: Show container logs on failure
        if: failure()
        run: |
          echo "üîç Displaying container logs for debugging..."
          echo "=== App Server Logs ==="
          docker compose -f docker-compose.test.yml logs app-server --tail=100
          echo ""
          echo "=== Playwright Container Logs ==="
          docker compose -f docker-compose.test.yml logs playwright --tail=50

      - name: Clean up Docker environment
        if: always()
        uses: ./.github/actions/docker-cleanup
        with:
          cleanup-level: 'basic'
          compose-file: 'docker-compose.test.yml'
          preserve-cache: 'true'

      - name: Post test summary
        if: always()
        run: |
          echo "üìä Docker E2E Tests Summary"
          echo "  Test Type: E2E Tests with Playwright"
          echo "  Browser: ${{ matrix.browser }}"
          echo "  Environment: Docker"
          echo "  Duration: ${{ job.status == 'success' && 'Completed successfully' || 'Failed or cancelled' }}"
          echo "  Artifacts: Playwright reports and failure artifacts uploaded"