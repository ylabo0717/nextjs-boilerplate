# ==============================================================================
# 本番環境用 環境変数設定（.env.prod.example）
#
# 使用方法:
# 1. このファイルを .env.prod にコピー
# 2. 実際の値を設定
# 3. docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
# ==============================================================================

# ------------------------------------------------------------------------------
# Application Configuration
# ------------------------------------------------------------------------------

# アプリケーションバージョン（メトリクス・ログで使用）
APP_VERSION=1.0.0

# Next.js 設定
NODE_ENV=production
NEXT_TELEMETRY_DISABLED=1

# ポート設定
PROXY_PORT=8080
PROXY_SSL_PORT=8443

# ------------------------------------------------------------------------------
# Security Configuration
# ------------------------------------------------------------------------------

# JWT/認証関連（実装時に使用）
# JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
# SESSION_SECRET=your-session-secret-change-this-in-production

# CORS設定
# ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# CSP (Content Security Policy) 設定
# CSP_POLICY=default-src 'self'; script-src 'self' 'unsafe-inline'

# ------------------------------------------------------------------------------
# OpenTelemetry / Monitoring Configuration
# ------------------------------------------------------------------------------

# OpenTelemetry サービス設定
OTEL_SERVICE_NAME=nextjs-app
OTEL_SERVICE_VERSION=${APP_VERSION}
OTEL_RESOURCE_ATTRIBUTES=service.name=${OTEL_SERVICE_NAME},service.version=${OTEL_SERVICE_VERSION}

# メトリクス エクスポート設定（Prometheusエンドポイント用）
# OTEL_EXPORTER_PROMETHEUS_PORT=9464
# OTEL_EXPORTER_PROMETHEUS_ENDPOINT=/metrics

# トレース エクスポート設定（必要に応じて）
# OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
# OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4317

# ------------------------------------------------------------------------------
# Database Configuration（実装時に使用）
# ------------------------------------------------------------------------------

# データベース接続（実装に応じて設定）
# DATABASE_URL=postgresql://username:password@localhost:5432/database_name
# REDIS_URL=redis://localhost:6379

# ------------------------------------------------------------------------------
# External Services Configuration（実装時に使用）
# ------------------------------------------------------------------------------

# API キー・認証情報（実装に応じて設定）
# EXTERNAL_API_KEY=your-api-key
# THIRD_PARTY_SERVICE_URL=https://api.service.com

# ------------------------------------------------------------------------------
# Logging Configuration
# ------------------------------------------------------------------------------

# ログレベル設定
LOG_LEVEL=info

# ログ出力先設定（本番環境では通常 'console'）
LOG_OUTPUT=console

# 構造化ログ有効化
STRUCTURED_LOGGING=true

# ------------------------------------------------------------------------------
# Performance Configuration
# ------------------------------------------------------------------------------

# Node.js メモリ制限
NODE_OPTIONS=--max-old-space-size=1024

# Next.js ビルド最適化
NEXT_DISABLE_SOURCEMAPS=true
NEXT_MINIMIZE=true

# ------------------------------------------------------------------------------
# Container Configuration
# ------------------------------------------------------------------------------

# リソース制限（docker-compose.prod.yml で使用）
CONTAINER_MEMORY_LIMIT=1g
CONTAINER_CPU_LIMIT=0.5

# Nginx設定
NGINX_WORKER_PROCESSES=auto
NGINX_WORKER_CONNECTIONS=1024

# ------------------------------------------------------------------------------
# Health Check Configuration
# ------------------------------------------------------------------------------

# ヘルスチェック設定
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3
HEALTH_CHECK_START_PERIOD=40s

# ------------------------------------------------------------------------------
# SSL/TLS Configuration（必要に応じて）
# ------------------------------------------------------------------------------

# SSL証明書設定（実装時に使用）
# SSL_CERT_PATH=/etc/ssl/certs/cert.pem
# SSL_KEY_PATH=/etc/ssl/private/key.pem

# ------------------------------------------------------------------------------
# Backup / Data Persistence Configuration（必要に応じて）
# ------------------------------------------------------------------------------

# バックアップ設定（実装時に使用）
# BACKUP_SCHEDULE=0 2 * * *
# BACKUP_RETENTION_DAYS=30

# ------------------------------------------------------------------------------
# Monitoring Configuration（監視機能使用時に必要）
# ------------------------------------------------------------------------------

# Grafana管理者パスワード（監視ダッシュボード用）
# 本番環境では強固なパスワードを設定すること
GRAFANA_ADMIN_PASSWORD=change-this-secure-password-in-production

# Grafana管理者ユーザー名（デフォルト: admin）
GRAFANA_ADMIN_USER=admin

# Grafanaドメイン設定
GRAFANA_DOMAIN=localhost

# ------------------------------------------------------------------------------
# IMPORTANT SECURITY NOTES
# ------------------------------------------------------------------------------
#
# 🔒 セキュリティ要件:
# 1. すべての SECRET や KEY は本番環境で必ず変更すること
# 2. データベースパスワードは強固なものを使用すること
# 3. API キーは適切な権限制限を設定すること
# 4. 本番環境では .env.prod を .gitignore に追加すること
#
# 📝 運用時の注意:
# 1. 環境変数の変更後はコンテナの再起動が必要
# 2. 機密情報は Docker Secrets の使用を検討すること
# 3. 定期的なセキュリティ監査を実施すること
#
# ==============================================================================