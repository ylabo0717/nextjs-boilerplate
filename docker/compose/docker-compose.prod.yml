# ==============================================================================
# Docker Compose Production Configuration
#
# 本番環境用のDocker Compose設定
# - セキュリティファースト設計
# - パフォーマンス最適化
# - 監視・ヘルスチェック統合
# - OpenTelemetryメトリクス対応
# - Nginx リバースプロキシ
# ==============================================================================

services:
  # ==============================================================================
  # Application - Next.js本番アプリケーション
  # ==============================================================================
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
      target: production
      args:
        - NODE_VERSION=22.13.0
        - ALPINE_VERSION=3.21
        - PNPM_VERSION=10.3.0
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      # OpenTelemetry configuration
      - OTEL_SERVICE_NAME=nextjs-app
      - OTEL_SERVICE_VERSION=${APP_VERSION:-1.0.0}
      # Security headers
      - NODE_OPTIONS=--max-old-space-size=1024
    # Resource limits for production stability
    mem_limit: 1g
    cpus: 0.5
    # Health check with existing /api/health endpoint
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://$(hostname -i):3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network
    # Security: run as non-root user (defined in Dockerfile)
    # No volumes needed for production (standalone build)

  # ==============================================================================
  # Reverse Proxy - Nginx本番リバースプロキシ
  # ==============================================================================
  proxy:
    build:
      context: docker/nginx
      dockerfile: Dockerfile
      target: production
    ports:
      - '${PROXY_PORT:-8080}:80'
      - '${PROXY_SSL_PORT:-8443}:443'
    restart: unless-stopped
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
      - BACKEND_HOST=app
      - BACKEND_PORT=3000
      # Production optimization
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    depends_on:
      app:
        condition: service_healthy
    # Resource limits for stability
    mem_limit: 256m
    cpus: 0.25
    # Health check for proxy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network

  # ==============================================================================
  # Loki - ログ収集システム
  # ==============================================================================
  loki:
    image: grafana/loki:3.5.0
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./docker/loki/loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - app-network
      - monitoring-network
    healthcheck:
      test:
        ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped
    # Resource limits
    mem_limit: 512m
    cpus: 0.25
    # Parallel startup - no dependency on app

  # ==============================================================================
  # Promtail - ログ転送エージェント
  # ==============================================================================
  promtail:
    image: grafana/promtail:latest
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./docker/promtail/promtail-config.yml:/etc/promtail/config.yml
      # Docker logs access
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - app-network
      - monitoring-network
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    # Resource limits
    mem_limit: 128m
    cpus: 0.1
    # Optimized health check for faster startup
    healthcheck:
      test: ['CMD-SHELL', 'pgrep promtail || exit 1']
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  # ==============================================================================
  # Grafana - 監視ダッシュボード
  # ==============================================================================
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:?Required}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring-network
    depends_on:
      loki:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/api/health || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    # Resource limits
    mem_limit: 256m
    cpus: 0.25

# ==============================================================================
# Volumes - データ永続化
# ==============================================================================
volumes:
  loki-data:
    name: nextjs-loki-data
    driver: local
  grafana-data:
    name: nextjs-grafana-data
    driver: local

# ==============================================================================
# Networks - ネットワーク分離
# ==============================================================================
networks:
  app-network:
    driver: bridge
    internal: false

  monitoring-network:
    driver: bridge
# ==============================================================================
# 使用方法
# ==============================================================================
#
# 本番環境起動（監視統合版）:
#   docker compose -f docker-compose.prod.yml --env-file .env.prod up -d
#
# アクセス:
# - Webアプリ: http://localhost:8080
# - Grafana: http://localhost:3001 (admin/パスワード)
# - Loki API: http://localhost:3100
#
# ログ監視:
#   docker compose -f docker-compose.prod.yml logs -f app
#
# ヘルスチェック確認:
#   docker compose -f docker-compose.prod.yml ps
#   curl http://localhost:8080/api/health
#
# メトリクス確認:
#   curl http://localhost:8080/api/metrics
#
# 本番環境停止:
#   docker compose -f docker-compose.prod.yml down
#
# ==============================================================================
