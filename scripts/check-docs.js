#!/usr/bin/env node

/**
 * Custom documentation checker that filters out auto-generated type warnings
 *
 * Purpose:
 * TypeDoc validates ALL exported items including auto-generated internal types.
 * This script filters out noise from legitimate warnings to focus on what matters.
 *
 * What we exclude and why:
 *
 * 1. Zod Schema Internal Types (Schema.__type.*)
 *    - These are auto-generated by Zod's z.object() and z.array()
 *    - Documenting these is impractical and provides no value
 *    - The schema itself is documented, which is sufficient
 *
 * 2. shadcn/ui Components (excluded via typedoc.json)
 *    - These are copied from external sources
 *    - Maintaining documentation for third-party code is unnecessary
 *    - Focus should be on custom business logic
 *
 * What we DO check:
 * - Custom functions, classes, interfaces
 * - Exported constants and configurations
 * - Business logic and API definitions
 * - Custom React components (not from shadcn/ui)
 *
 * This ensures documentation efforts focus on code that:
 * - Is written by the team
 * - Contains business logic
 * - Serves as public API
 */

// eslint-disable-next-line @typescript-eslint/no-require-imports
const { execSync } = require('child_process');

// Patterns to ignore - auto-generated types that don't need documentation
const IGNORE_PATTERNS = [
  /Schema\.__type\./, // Zod schema internal types (auto-generated)
  /\.__(type|index)\./, // TypeScript compiler internal types
  // Add more patterns here if other libraries generate similar noise
];

// Run TypeDoc and capture output
let output = '';

try {
  output = execSync(
    'pnpm typedoc --emit none --validation.notDocumented true --validation.notExported true --validation.invalidLink true 2>&1',
    {
      encoding: 'utf8',
      stdio: 'pipe',
    }
  );
} catch (error) {
  output = error.stdout || error.toString();
}

// Parse warnings
const lines = output.split('\n');
const relevantWarnings = [];

for (const line of lines) {
  // Skip lines that match ignore patterns
  const shouldIgnore = IGNORE_PATTERNS.some((pattern) => pattern.test(line));

  if (shouldIgnore) {
    continue;
  }

  // Keep TypeScript version warning (informational only)
  if (line.includes('unsupported TypeScript version')) {
    console.log(line);
    continue;
  }

  // Check for actual documentation warnings
  if (line.includes('does not have any documentation')) {
    relevantWarnings.push(line);
  } else if (line.includes('[error]')) {
    relevantWarnings.push(line);
  }
  // Skip summary lines like "Found 0 errors and X warnings"
}

// Output results
if (relevantWarnings.length > 0) {
  console.error('\n❌ Documentation issues found:\n');
  relevantWarnings.forEach((warning) => console.error(warning));
  console.error(`\n📊 Total issues: ${relevantWarnings.length}`);
  process.exit(1);
} else {
  console.log('✅ Documentation validation passed');
  process.exit(0);
}
