# ==============================================================================
# 開発環境用 環境変数設定（.env.dev.example）
#
# 使用方法:
# 1. このファイルを .env.dev にコピー
# 2. 必要に応じて値を調整
# 3. .env.base と組み合わせて使用:
#    docker-compose --env-file .env.base --env-file .env.dev up
#
# 注意: この設定は .env.base の設定を上書きします
# ==============================================================================

# ------------------------------------------------------------------------------
# Environment Configuration - 開発環境設定
# ------------------------------------------------------------------------------

# 開発環境指定
NODE_ENV=development

# 開発用ポート設定
PORT=3000
BASE_URL=http://localhost:3000
PROXY_PORT=8080

# ------------------------------------------------------------------------------
# OpenTelemetry / Monitoring Configuration - 開発環境用
# ------------------------------------------------------------------------------

# OpenTelemetry サービス設定（開発環境用）
OTEL_SERVICE_NAME=nextjs-app-dev
OTEL_RESOURCE_ATTRIBUTES=service.name=${OTEL_SERVICE_NAME},service.version=${APP_VERSION}

# 開発環境ではメトリクス収集を無効化（パフォーマンス向上）
# OTEL_EXPORTER_PROMETHEUS_PORT=9464
# OTEL_EXPORTER_PROMETHEUS_ENDPOINT=/metrics

# ------------------------------------------------------------------------------
# Development Tools Configuration - 開発ツール設定
# ------------------------------------------------------------------------------

# ホットリロード設定
WATCHPACK_POLLING=true

# デバッグ設定
DEBUG=true
NODE_OPTIONS=--max-old-space-size=1024 --inspect=0.0.0.0:9229

# Next.js 開発設定
NEXT_DISABLE_SOURCEMAPS=false
NEXT_MINIMIZE=false

# ------------------------------------------------------------------------------
# Security Configuration - 開発環境用（テスト値）
# ------------------------------------------------------------------------------

# JWT/認証関連（開発用テスト値）
# JWT_SECRET=dev-jwt-secret-key-not-for-production
# SESSION_SECRET=dev-session-secret-not-for-production

# NextAuth設定（開発用）
# NEXTAUTH_SECRET=dev-nextauth-secret
# NEXTAUTH_URL=http://localhost:3000

# CORS設定（開発環境用）
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080

# CSP設定（開発環境用・緩和設定）
CSP_POLICY=default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'

# ------------------------------------------------------------------------------
# Database Configuration - 開発環境用
# ------------------------------------------------------------------------------

# 開発用データベース（Docker Compose使用時）
# DATABASE_URL=postgresql://dev:dev@localhost:5432/nextjs_dev
# REDIS_URL=redis://localhost:6379/0

# ------------------------------------------------------------------------------
# External Services Configuration - 開発環境用
# ------------------------------------------------------------------------------

# 開発・テスト用API設定
# EXTERNAL_API_KEY=dev-api-key
# THIRD_PARTY_SERVICE_URL=https://api-dev.service.com

# ------------------------------------------------------------------------------
# Container Configuration - 開発環境用（リソース緩和）
# ------------------------------------------------------------------------------

# 開発環境用リソース設定（.env.baseを上書き）
CONTAINER_MEMORY_LIMIT=1g
CONTAINER_CPU_LIMIT=1.0

# Nginx開発設定
NGINX_WORKER_CONNECTIONS=1024

# ------------------------------------------------------------------------------
# Logging Configuration - 開発環境用
# ------------------------------------------------------------------------------

# ログ出力先設定（開発環境では詳細ログ）
LOG_OUTPUT=console
LOG_LEVEL=debug

# ------------------------------------------------------------------------------
# IMPORTANT DEVELOPMENT NOTES - 開発環境での注意事項
# ------------------------------------------------------------------------------
#
# 🚀 開発環境の特徴:
# 1. セキュリティ制約を緩和（開発効率優先）
# 2. デバッグ・監視機能を有効化
# 3. ホットリロード・ソースマップ有効
# 4. リソース制限を緩和
#
# ⚠️ セキュリティ注意:
# - この設定は開発専用です
# - 本番環境では絶対に使用しないでください
# - テスト値・弱いパスワードが含まれています
#
# 📝 使用方法:
# - docker-compose up で自動的にこの設定が適用されます
# - ローカル開発時は .env.dev.local で個人設定を上書き可能
#
# ==============================================================================