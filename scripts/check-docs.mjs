#!/usr/bin/env node

/**
 * Custom documentation checker that filters out auto-generated type warnings
 *
 * Purpose:
 * TypeDoc validates ALL exported items including auto-generated internal types.
 * This script filters out noise from legitimate warnings to focus on what matters.
 *
 * What we exclude and why:
 *
 * 1. Zod Schema Internal Types (Schema.__type.*)
 *    - These are auto-generated by Zod's z.object() and z.array()
 *    - Documenting these is impractical and provides no value
 *    - The schema itself is documented, which is sufficient
 *
 * 2. shadcn/ui Components (excluded via typedoc.json)
 *    - These are copied from external sources
 *    - Maintaining documentation for third-party code is unnecessary
 *    - Focus should be on custom business logic
 *
 * What we DO check:
 * - Custom functions, classes, interfaces
 * - Exported constants and configurations
 * - Business logic and API definitions
 * - Custom React components (not from shadcn/ui)
 *
 * This ensures documentation efforts focus on code that:
 * - Is written by the team
 * - Contains business logic
 * - Serves as public API
 */

import { execSync } from 'child_process';

// Patterns to ignore - auto-generated types that don't need documentation
const IGNORE_PATTERNS = [
  /Schema\.__type\./, // Zod schema internal types (auto-generated)
  /\.__(type|index)\./, // TypeScript compiler internal types
  // Add more patterns here if other libraries generate similar noise
];

// Run TypeDoc and capture output
let output = '';

try {
  output = execSync(
    'pnpm typedoc --emit none --validation.notDocumented true --validation.notExported true --validation.invalidLink true 2>&1',
    {
      encoding: 'utf8',
      maxBuffer: 1024 * 1024 * 10, // 10MB buffer
    }
  );
} catch (error) {
  // TypeDoc exits with non-zero when there are warnings
  // In ES modules, error might have different structure
  if (error && typeof error === 'object') {
    output = error.stdout || error.stderr || error.toString();
  } else {
    output = String(error);
  }
}

// Split output into lines
const lines = output.split('\n');

// Track warnings - first pass to count filtered warnings
let filteredWarnings = 0;
for (const line of lines) {
  if (IGNORE_PATTERNS.some((pattern) => pattern.test(line))) {
    filteredWarnings++;
  }
}

// Second pass to filter lines and update summary
const hasFilteredWarnings = filteredWarnings > 0;
const filteredLines = [];

for (const line of lines) {
  // Skip lines matching ignore patterns
  if (IGNORE_PATTERNS.some((pattern) => pattern.test(line))) {
    continue;
  }

  // Update summary line if needed
  if (line.includes('Found 0 errors and')) {
    const match = line.match(/(\d+) warnings/);
    if (match) {
      const totalWarnings = parseInt(match[1], 10);
      const remainingWarnings = totalWarnings - filteredWarnings;
      if (remainingWarnings === 0) {
        // Skip the summary line if all warnings were filtered
        continue;
      } else {
        // Update the warning count
        const updatedLine = line.replace(/\d+ warnings/, `${remainingWarnings} warnings`);
        filteredLines.push(updatedLine);
      }
    } else {
      filteredLines.push(line);
    }
  } else {
    filteredLines.push(line);
  }
}

// Output filtered results
const finalOutput = filteredLines.join('\n').trim();

if (finalOutput) {
  console.log(finalOutput);

  // Check if all warnings were filtered (only TypeScript version warning remains)
  const hasRealWarnings = filteredLines.some(
    (line) =>
      line.includes('does not have any documentation') ||
      (line.includes('[warning]') &&
        !line.includes('TypeScript version') &&
        !line.includes('Found 0 errors'))
  );

  // Exit with error if there are real warnings after filtering
  if (hasRealWarnings || finalOutput.includes('[error]')) {
    if (hasFilteredWarnings) {
      console.log('\nðŸ’¡ Note: Some warnings for auto-generated types were filtered out.');
    }
    process.exit(1);
  }
}

// Show success message with note about filtered warnings
if (hasFilteredWarnings) {
  console.log('\nâœ… Documentation validation passed (auto-generated warnings filtered)');
} else {
  console.log('âœ… Documentation validation passed');
}
