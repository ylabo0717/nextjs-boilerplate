# ==============================================================================
# Docker Compose Production Configuration
#
# 本番環境用のDocker Compose設定
# - セキュリティファースト設計
# - パフォーマンス最適化
# - 監視・ヘルスチェック統合
# - OpenTelemetryメトリクス対応
# - Nginx リバースプロキシ
# ==============================================================================

services:
  # ==============================================================================
  # Application - Next.js本番アプリケーション
  # ==============================================================================
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
      target: production
      args:
        - NODE_VERSION=20.18.0
        - ALPINE_VERSION=3.20
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      # OpenTelemetry configuration
      - OTEL_SERVICE_NAME=nextjs-app
      - OTEL_SERVICE_VERSION=${APP_VERSION:-1.0.0}
      # Security headers
      - NODE_OPTIONS=--max-old-space-size=1024
    # Resource limits for production stability
    mem_limit: 1g
    cpus: 0.5
    # Health check with existing /api/health endpoint
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://$(hostname -i):3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network
    # Security: run as non-root user (defined in Dockerfile)
    # No volumes needed for production (standalone build)

  # ==============================================================================
  # Reverse Proxy - Nginx本番リバースプロキシ
  # ==============================================================================
  proxy:
    build:
      context: docker/nginx
      dockerfile: Dockerfile
    ports:
      - '${PROXY_PORT:-8080}:80'
      - '${PROXY_SSL_PORT:-8443}:443'
    restart: unless-stopped
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
      - BACKEND_HOST=app
      - BACKEND_PORT=3000
      # Production optimization
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    depends_on:
      app:
        condition: service_healthy
    # Resource limits for stability
    mem_limit: 256m
    cpus: 0.25
    # Health check for proxy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network

  # ==============================================================================
  # Monitoring - メトリクス・ログ収集（オプション）
  # ==============================================================================
  # 既存のdocker-compose.loki.ymlとの統合を想定
  # 運用時にはloki設定と組み合わせて使用

# ==============================================================================
# Networks - セキュアネットワーク設定
# ==============================================================================
networks:
  app-network:
    name: nextjs-prod-network
    driver: bridge
    # Network isolation for security
    internal: false
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
# ==============================================================================
# 使用方法
# ==============================================================================
#
# 本番環境起動:
#   docker compose -f docker-compose.prod.yml up -d
#
# ログ監視:
#   docker compose -f docker-compose.prod.yml logs -f app
#
# ヘルスチェック確認:
#   docker compose -f docker-compose.prod.yml ps
#   curl http://localhost/api/health
#
# メトリクス確認:
#   curl http://localhost/api/metrics
#
# 本番環境停止:
#   docker compose -f docker-compose.prod.yml down
#
# システムリソース確認:
#   docker compose -f docker-compose.prod.yml exec app top
#   docker stats $(docker compose -f docker-compose.prod.yml ps -q)
#
# ログ・監視統合（オプション）:
#   docker compose -f docker-compose.prod.yml -f docker-compose.loki.yml up -d
#
# ==============================================================================
