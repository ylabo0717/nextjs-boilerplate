name: Metrics and Quality Gate

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      skip_quality_gate:
        description: 'Skip quality gate checks'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  metrics:
    name: Collect Metrics
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      build_time: ${{ steps.metrics.outputs.build_time }}
      test_time: ${{ steps.metrics.outputs.test_time }}
      bundle_size_total: ${{ steps.metrics.outputs.bundle_size_total }}
      quality_gate_passed: ${{ steps.quality.outputs.quality_gate_passed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install tsx for scripts
        run: pnpm add -D tsx

      - name: Run tests with coverage
        run: pnpm test:coverage || true
        continue-on-error: true

      - name: Measure metrics
        id: metrics
        run: |
          pnpm tsx scripts/measure-metrics.ts
        continue-on-error: true

      - name: Run quality gate checks
        id: quality
        if: github.event.inputs.skip_quality_gate != 'true'
        run: |
          pnpm tsx scripts/quality-gate.ts
        continue-on-error: true

      - name: Upload metrics artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metrics-${{ github.sha }}
          path: |
            metrics/
            coverage/
          retention-days: 30

      - name: Generate metrics report
        if: github.event_name == 'pull_request'
        env:
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        run: |
          pnpm tsx scripts/report-metrics.ts
        continue-on-error: true

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.13.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results-${{ github.sha }}
          path: .lighthouseci/
          retention-days: 7

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and analyze bundle
        run: |
          ANALYZE=true pnpm build
        continue-on-error: true

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis-${{ github.sha }}
          path: .next/analyze/
          retention-days: 7

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [metrics, lighthouse, bundle-analysis]
    if: always()

    steps:
      - name: Create summary
        run: |
          echo "## 📊 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.metrics.outputs.quality_gate_passed }}" == "true" ]; then
            echo "✅ **Quality gate PASSED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quality gate FAILED**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Build Time: ${{ needs.metrics.outputs.build_time }}ms" >> $GITHUB_STEP_SUMMARY
          echo "- Test Time: ${{ needs.metrics.outputs.test_time }}ms" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle Size: ${{ needs.metrics.outputs.bundle_size_total }} bytes" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- [Metrics Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Lighthouse Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Bundle Analysis](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Set status check
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const passed = "${{ needs.metrics.outputs.quality_gate_passed }}" === "true";
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: passed ? 'success' : 'failure',
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: passed ? 'Quality gate passed' : 'Quality gate failed',
              context: 'Quality Gate'
            });
