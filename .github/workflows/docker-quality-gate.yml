name: Docker Quality Gate

on:
  workflow_run:
    workflows: 
      - "Docker Unit Tests"
      - "Docker Integration Tests"
      - "Docker E2E Tests"
    types: [completed]
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  docker-quality-gate:
    name: Docker Quality Gate Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get workflow run results
        id: get-results
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.payload.workflow_run.head_sha;
            
            console.log(`Analyzing workflows for SHA: ${sha}`);
            
            // Get all workflow runs for this SHA
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              head_sha: sha,
              per_page: 100
            });
            
            const targetWorkflows = [
              'Docker Unit Tests',
              'Docker Integration Tests', 
              'Docker E2E Tests'
            ];
            
            const results = {};
            let totalRuns = 0;
            let successfulRuns = 0;
            
            for (const workflow of targetWorkflows) {
              const runs = workflowRuns.workflow_runs.filter(run => 
                run.name === workflow && run.head_sha === sha
              );
              
              if (runs.length > 0) {
                const latestRun = runs[0]; // Most recent run
                results[workflow] = {
                  status: latestRun.status,
                  conclusion: latestRun.conclusion,
                  url: latestRun.html_url,
                  id: latestRun.id
                };
                totalRuns++;
                if (latestRun.conclusion === 'success') {
                  successfulRuns++;
                }
                console.log(`${workflow}: ${latestRun.conclusion}`);
              } else {
                console.log(`${workflow}: No runs found`);
                results[workflow] = {
                  status: 'not_found',
                  conclusion: 'not_found',
                  url: null,
                  id: null
                };
              }
            }
            
            core.setOutput('results', JSON.stringify(results));
            core.setOutput('total_runs', totalRuns);
            core.setOutput('successful_runs', successfulRuns);
            
            return results;

      - name: Analyze test results
        id: analyze
        run: |
          echo "=== Docker Quality Gate Analysis ==="
          echo "📊 Analyzing Docker test workflow results..."
          
          RESULTS='${{ steps.get-results.outputs.results }}'
          TOTAL_RUNS='${{ steps.get-results.outputs.total_runs }}'
          SUCCESSFUL_RUNS='${{ steps.get-results.outputs.successful_runs }}'
          
          echo "Total workflow runs found: $TOTAL_RUNS"
          echo "Successful runs: $SUCCESSFUL_RUNS"
          echo ""
          
          # Parse results
          FAILED_WORKFLOWS=""
          MISSING_WORKFLOWS=""
          SUCCESS_COUNT=0
          
          # Check each workflow result
          for workflow in "Docker Unit Tests" "Docker Integration Tests" "Docker E2E Tests"; do
            conclusion=$(echo "$RESULTS" | jq -r --arg name "$workflow" '.[$name].conclusion // "unknown"')
            status=$(echo "$RESULTS" | jq -r --arg name "$workflow" '.[$name].status // "unknown"')
            url=$(echo "$RESULTS" | jq -r --arg name "$workflow" '.[$name].url // "N/A"')
            
            echo "🔍 $workflow:"
            echo "  Status: $status"
            echo "  Conclusion: $conclusion"
            echo "  URL: $url"
            
            if [ "$conclusion" = "success" ]; then
              echo "  ✅ PASSED"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            elif [ "$conclusion" = "not_found" ]; then
              echo "  ⚠️  NOT EXECUTED"
              MISSING_WORKFLOWS="$MISSING_WORKFLOWS$workflow, "
            else
              echo "  ❌ FAILED ($conclusion)"
              FAILED_WORKFLOWS="$FAILED_WORKFLOWS$workflow, "
            fi
            echo ""
          done
          
          # Set outputs for next step
          echo "success_count=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
          echo "failed_workflows=${FAILED_WORKFLOWS%, }" >> $GITHUB_OUTPUT
          echo "missing_workflows=${MISSING_WORKFLOWS%, }" >> $GITHUB_OUTPUT

      - name: Download test artifacts
        if: always()
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.payload.workflow_run.head_sha;
            
            try {
              // Get artifacts from workflow runs
              const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
                owner,
                repo,
                per_page: 100
              });
              
              const testArtifacts = artifacts.artifacts.filter(artifact => 
                artifact.name.includes('docker-') && 
                artifact.name.includes('test-results')
              );
              
              console.log(`Found ${testArtifacts.length} test result artifacts`);
              
              // Create summary of available artifacts
              let artifactSummary = "📦 Available Test Artifacts:\n";
              for (const artifact of testArtifacts) {
                artifactSummary += `  - ${artifact.name} (${artifact.size_in_bytes} bytes)\n`;
              }
              
              fs.writeFileSync('artifact-summary.txt', artifactSummary);
              console.log(artifactSummary);
            } catch (error) {
              console.log('Error downloading artifacts:', error.message);
            }

      - name: Generate quality report
        run: |
          echo "📋 Generating Docker Quality Gate Report..."
          
          SUCCESS_COUNT='${{ steps.analyze.outputs.success_count }}'
          FAILED_WORKFLOWS='${{ steps.analyze.outputs.failed_workflows }}'
          MISSING_WORKFLOWS='${{ steps.analyze.outputs.missing_workflows }}'
          
          cat > docker-quality-report.md << EOF
          # Docker Quality Gate Report
          
          **Generated**: $(date)
          **SHA**: ${{ github.sha }}
          **Trigger**: ${{ github.event.workflow_run.name }}
          
          ## Summary
          
          - **Successful Workflows**: $SUCCESS_COUNT/3
          - **Failed Workflows**: ${FAILED_WORKFLOWS:-"None"}
          - **Missing Workflows**: ${MISSING_WORKFLOWS:-"None"}
          
          ## Workflow Results
          
          $(echo '${{ steps.get-results.outputs.results }}' | jq -r 'to_entries[] | "### \(.key)\n- **Status**: \(.value.status)\n- **Conclusion**: \(.value.conclusion)\n- **URL**: \(.value.url // "N/A")\n"')
          
          ## Artifacts
          
          $(cat artifact-summary.txt 2>/dev/null || echo "No artifact summary available")
          
          ## Next Steps
          
          EOF
          
          if [ "$SUCCESS_COUNT" -eq 3 ]; then
            cat >> docker-quality-report.md << EOF
          ✅ **All Docker workflows passed successfully!**
          
          The Docker-based CI/CD pipeline is functioning correctly:
          - Unit tests completed successfully
          - Integration tests with Testcontainers passed
          - E2E tests with Playwright completed
          
          EOF
          else
            cat >> docker-quality-report.md << EOF
          ❌ **Quality gate failed - action required**
          
          EOF
            if [ -n "$FAILED_WORKFLOWS" ]; then
              echo "**Failed workflows require investigation:**" >> docker-quality-report.md
              echo "- $FAILED_WORKFLOWS" >> docker-quality-report.md
              echo "" >> docker-quality-report.md
            fi
            if [ -n "$MISSING_WORKFLOWS" ]; then
              echo "**Missing workflows may indicate trigger issues:**" >> docker-quality-report.md
              echo "- $MISSING_WORKFLOWS" >> docker-quality-report.md
              echo "" >> docker-quality-report.md
            fi
          fi

      - name: Upload quality report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-quality-gate-report-${{ github.sha }}
          path: |
            docker-quality-report.md
            artifact-summary.txt
          retention-days: 30

      - name: Quality gate decision
        run: |
          SUCCESS_COUNT='${{ steps.analyze.outputs.success_count }}'
          FAILED_WORKFLOWS='${{ steps.analyze.outputs.failed_workflows }}'
          
          echo "=== Docker Quality Gate Decision ==="
          echo ""
          
          if [ "$SUCCESS_COUNT" -eq 3 ]; then
            echo "✅ QUALITY GATE: PASSED"
            echo ""
            echo "🎉 All Docker workflows completed successfully!"
            echo "📊 Results: 3/3 workflows passed"
            echo "🐳 Docker CI/CD pipeline is healthy"
            echo ""
            echo "✅ Unit Tests: Docker-based unit testing"
            echo "✅ Integration Tests: Testcontainers integration"  
            echo "✅ E2E Tests: Multi-browser Playwright testing"
          else
            echo "❌ QUALITY GATE: FAILED"
            echo ""
            echo "🚨 Docker workflows did not meet quality standards"
            echo "📊 Results: $SUCCESS_COUNT/3 workflows passed"
            
            if [ -n "$FAILED_WORKFLOWS" ]; then
              echo "💥 Failed workflows: $FAILED_WORKFLOWS"
            fi
            
            echo ""
            echo "🔧 Recommended actions:"
            echo "1. Review failed workflow logs for specific errors"
            echo "2. Check Docker environment and configuration"
            echo "3. Verify test data and environment setup"
            echo "4. Ensure all dependencies are properly configured"
            echo ""
            exit 1
          fi