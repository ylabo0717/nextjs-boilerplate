name: Security Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run at 3:00 AM UTC every day
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        id: audit
        run: |
          # Run audit and capture output
          set +e
          pnpm audit --audit-level moderate > audit-output.txt 2>&1
          AUDIT_EXIT_CODE=$?
          set -e

          # Display audit output
          cat audit-output.txt

          # Check for high or critical vulnerabilities
          if grep -E "(high|critical)" audit-output.txt > /dev/null 2>&1; then
            echo "❌ High or critical vulnerabilities found"
            echo "has_high_vulnerabilities=true" >> $GITHUB_OUTPUT
            
            # Fail the job if high/critical vulnerabilities are found
            if [ "${{ github.event_name }}" == "push" ] || [ "${{ github.event_name }}" == "pull_request" ]; then
              exit 1
            fi
          else
            echo "✅ No high or critical vulnerabilities found"
            echo "has_high_vulnerabilities=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-results
          path: audit-output.txt
          retention-days: 7

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript-typescript']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{ matrix.language }}'
          output: sarif-results
          upload: true

      - name: Upload SARIF results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results-${{ matrix.language }}
          path: sarif-results
          retention-days: 7

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Upload Gitleaks results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: results.sarif
          retention-days: 7

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          # Install license checker
          pnpm add -g license-checker

          # Run license check and output to JSON
          npx license-checker --json --out licenses.json --excludePrivatePackages

          # Check for problematic licenses (GPL, AGPL, etc.)
          PROBLEMATIC_LICENSES="GPL|AGPL|LGPL|SSPL|CC-BY-NC"

          if grep -E "$PROBLEMATIC_LICENSES" licenses.json > /dev/null 2>&1; then
            echo "⚠️ Warning: Potentially problematic licenses detected"
            grep -E "$PROBLEMATIC_LICENSES" licenses.json | head -20
            
            # Don't fail the job, just warn
            echo "license_issues=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No problematic licenses detected"
            echo "license_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload license report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
          retention-days: 7

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-audit, codeql-analysis, secret-scanning, license-check]
    if: always()
    steps:
      - name: Create Security Summary
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = ${{ toJson(needs) }};
            let summary = '## 🔒 Security Scan Summary\n\n';
            let hasFailures = false;

            // Check each job status
            Object.entries(jobs).forEach(([jobName, jobData]) => {
              const status = jobData.result;
              const icon = status === 'success' ? '✅' : status === 'failure' ? '❌' : '⚠️';
              const formattedName = jobName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
              
              summary += `${icon} **${formattedName}**: ${status}\n`;
              
              if (status === 'failure') {
                hasFailures = true;
              }
            });

            // Add timestamp
            const timestamp = new Date().toISOString();
            summary += `\n📅 Scanned at: ${timestamp}\n`;

            // Add recommendations if there are failures
            if (hasFailures) {
              summary += '\n### ⚠️ Action Required\n';
              summary += '- Review the security scan results above\n';
              summary += '- Fix any high or critical vulnerabilities\n';
              summary += '- Ensure no secrets are committed\n';
              summary += '- Review CodeQL findings\n';
            } else {
              summary += '\n### ✅ All Security Checks Passed\n';
            }

            // Write to summary
            await core.summary
              .addRaw(summary)
              .write();

            // Comment on PR if this is a pull request
            if (context.eventName === 'pull_request') {
              const issue_number = context.issue.number;
              
              // Find and update existing comment or create new one
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('🔒 Security Scan Summary')
              );
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: summary
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number,
                  body: summary
                });
              }
            }
